# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_HGGL5qCplPsHIlCdXDjT9I6SFgsTWZ
"""

3+1

3-5

4/3

4//3

5*3

5**2

# Exponencial

5**3

# División Entera

5%10

print("Hola 'como' estan")

print('Hola "Como" estan')

#Concatenar Strings
print("hola"+"Como"+"Estan")
print(3*"hola")

Print(3*"Hola" + 2*"jaja")

#Formula
var1=3
var2=4
print(var1)

resultado = var1 + var2
print("El resultado es: ",(resultado)) 
print("El resultado es: " + str(resultado)) #Si usamos el + debemos convertir el número a texto.
print(f'El resultado es: {resultado}')

#Las {} con el format van haciendo referencia al valor que se vaya poniendo según el orden. 
print("La suma de {} + {} es {}".format(var1, var2, var1 + var2))

sql_insert = "INSERT INTO usuarios (id, nombre) VALUES ({},{})".format("123","'Preng'") #Se debe de indicar que es un String, por lo que se coloca entre '' el texto.
print(sql_insert)

#Estraer texto, una letra en especifio
a = "Hola como están?"
a[0]

#Extraer un conjunto de texto como el extrae
a[3:8]

#Extraer un texto desde el inicio hasta los caracteres que se quieran como el izquierda
a[:5]

##Extraer un texto desde el fin hasta los caracteres que se quieran como el Derecha
a[8:]

#lista = arreglo
nums = [2,3,4,5,6,7]
nums

#Extraer un número del arreglo según su posición
nums[2]

#Extraer valores según sus posiciones
nums[2:5]

nums[4:]

#APPEND pone un elemento al final
nums.append(5)
nums

nums.insert(5,100)
nums

#Remover un valor
nums.remove(5)
nums

#Sacar el último elemento del arreglo
nums.pop()

nums

#Minimo
min(nums)

#Maximo
max(nums)

#sumatoria del arreglo
sum(nums)

#Promedio
#Len es para sacar la cantidad de elementos
sum(nums)/len(nums)

#ordenar los valores de menor
nums.sort()
nums

#Ordenarlos de mayor a menor
nums.sort(reverse = True) #modificación interna de la lista
nums

#Otra forma de ordenarlos
sorted(nums, reverse = True) #no modifica la lista internamente

nombre = input("Ingrese un nombre: ")
salida = f"hola {nombre}, como estas?"
print(salida)



"""### **Ejemplo #1**"""

nombre = input("Ingrese el nombre del colaborador: ")
horas = int(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo número
pagoXhora = float(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo float
salario = (horas*pagoXhora)
print("El de {} es: {}".format(nombre,salario))

#Que pasaria si por error se ingresan letras donde van numeros, esto da error, entonces se corrige de la siguiente manera:

try:
  nombre = input("Ingrese el nombre del colaborador: ")
  horas = int(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo número
  pagoXhora = float(input("Ingrese las horas trabajadas:")) #Casteamos a tipo float
  salario = (horas*pagoXhora)
  print("El de {} es: {}".format(nombre,salario))
except(ValueError):
  print("Los datos no son validos.")

#Que pasaria si hay una división entre 0, es decir otro tipo de error porque el "ValueError" es solo para error en el tipo de valor

try:
  nombre = input("Ingrese el nombre del colaborador: ")
  horas = int(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo número
  pagoXhora = float(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo float
  salario = (horas*pagoXhora)
  a = 3/0  #Se provoco este error
  print("El de {} es: {}".format(nombre,salario))
except(ValueError):
  print("Los datos no son validos.")
except(ZeroDivisionError):
  print("División por cero")
finally: #El finally se ejecuta siempre, haya o no haya error, esto es opcional.
  print("\n Terminó el programa...") #\n esto es para dar un ENTER en el programa.

#Cualquier tipo de error

try:
  nombre = input("Ingrese el nombre del colaborador: ")
  horas = int(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo número
  pagoXhora = float(input("Ingrese las horas trabajadas: ")) #Casteamos a tipo float
  salario = (horas*pagoXhora)
  a = 3/0  #Se provoco este error
  print("El de {} es: {}".format(nombre,salario))
except Exception as ex: #Esto aplica para cualqueir tipo de error
  print("hubo un problema")

"""## **Ejemplo #2 Condicionales**"""

try:
  numero = float(input("Ingrese un número: "))
  if(numero < 0):
    numero = 1*numero

  print("El valor absoluto es: " + str(numero))  #No es necesario un Else
except(ValueError):
  print("Los datos no son Validos.")



"""### **Ejemplo #3 Condicionales**"""

try:
  numero = int(input("Ingrese un numero: "))
  if((numero%2) == 0):  #El % nos da el residuo
     print(f"El número {numero} es Par.")
  else:
     print(f"El número {numero} es Impar.")
except(ValueError):
  print("Los datos no son validos.")

"""## **Ejemplo #4 Condicionales**"""

try:
  dia = int(input("Ingrese un número: "))
  if(dia == 1):
    print("El dia es Lunes")
  elif(dia == 2):
    print("El dia es Martes")
  elif(dia == 3):
    print("El dia es Miercoles")
  elif(dia == 4):
    print("El dia es Jueves")
  elif(dia == 5):
    print("El dia es Viernes")
  elif((dia>=6) and (dia<=7)):
    print("El dia es Fin de Semana")
  else:
    print("No se Conoce el día") #Este es como el "Default" que se ejecutará si el número no se incluye
except(ValueError):
  print("Los datos no son validos.")

"""### **Ejemplo #1 - Ciclo While**"""

import random #Importar el paquete RANDOM para poder usar la función RANDINT

ganador = random.randint(1,20)
print("El ganador es: ", ganador)
while(numero != ganador): #!= es como el diferente a 
  try:
    numero = int(input("Ingrese un número: "))
    if(numero != ganador):
      print("Número incorrecto, intente de nuevo.")
  except(ValueError):
      print("Dato Invalido.")

print("Gano!!!")

"""## **#Ejemplo #1 - Ciclo For**"""

datos = [3,4,5,7,10,6]
suma = 0
for i in range(0, len(datos), 1):
  suma = suma + datos[i]

print(suma)

"""
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## **CLASE 3**

### **SUBRUTINAS**"""

def sumas_S(a, b): #def es la palabra reservada para definir las subrutinas
  salida = 0
  for i in range(0, b, 1):
    salida = salida + a
  return salida #Si no tuviera un RETURN seria un procedimiento porque no devuelve nada, importante que para que sea SUBRUTINA devuela algo.

sumas_S(4,5)

"""**EJEMPLO #2**

- Mi Solución
"""

dia = int(input("Ingrese el día: "))
  mes = int(input("Ingrese el mes: "))
  anio = int(input("Ingrese el año: "))
  if dia > 0 and dia < 31:
     if mes > 1 and mes < 13:
      if anio > 1899 and anio < 2019:
        print("Fecha correcta")
      else:
        print("Año Incorrecto")
     else:
        print("Mes Incorrecto")
  else:
        print("Día Incorrecto")

"""## **Solución de un compañero:**"""

import time
date = input('Ingrese Fecha:  ')
try:
  valid_date = time.strptime(date, '%d/%m/%Y')
except ValueError:
  print('Fecha Invalida')

"""## **Solución de Preng**"""

def validar_fecha (dia, mes, anio):
    valida = True #Bandera, 

    if ((dia < 1) or (dia > 21)):
      valida = False
    
    if ((mes < 1) or (mes > 12)):
      valida = False

    if ((anio < 1900 ) or (anio > 2018)):
      valida = False
    
    print(f"la fecha es valida? {fecha_valida}")
    return valida

dia = int(input("Ingrese el día: "))
  mes = int(input("Ingrese el mes: "))
  anio = int(input("Ingrese el año: "))

  fecha_valida = validar_fecha(dia, mes, anio)
 
  print(f"La fecha es valida? {fecha_valida}")

"""## **Expresiones Regulares**"""

import re

strFecha = '01/12/1991'
patron = "^(0?[1-9]|1[0-9]|2[0-9]|3[0-1])/(0?[1-9]|1[0-2])/(19[0-9][0-9]|20[0-1][0-9])$"
x = re.match (patron, strFecha)

if(x):
  print("La Fecha es Valida")
else:
  print("La Fecha no es Valida")

"""## Estructura de datos:
* Listas
* Duplas
* Diccionarios
* Sets


# 1. Lista
"""

lista = [13,4,5,7]

lista = [1,3,4, 'Hola', 'JAJA', True, False]
lista

lista [0]

lista[5]

len(lista)

lista.append("jeje")
lista.append(1245.454)

lista

arrLetras = []
strLetras = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
arrLetras.extend(strLetras)

arrLetras

strSalida = ''
for i in range(0, 10, 1):
  alLetra = random.randint(0, len(arrLetras)-1)
  alNum = random.randint(0, 9)
  strSalida = strSalida + str(alNum) + arrLetras[alLetra]

print(strSalida)

lista.insert(7, "JOJO")

lista.pop()

lista.remove('JAJA')

lista

lista[2:8] #Extrae de un punto de la lista al otro, tomando en cuenta que inicia en 0

lista[ : :-1] #Indices negativos, Preng menciona que no lo ha usado, mas que para cambiar el orden del arreglo

lista.index('JOJO') #Nos da la posición de "JOJO" en el listado

'Hola' in lista #Verifica si "HOLA" esta dentro de la lista

# COMPREHENSIONS

a = [45, 50, 90, 80, 32, 17]

for i in range (0, len(a)):
  print(a[i]**2)

#Ciclo Foreach

for val in a:
  print(val**2)

for index, item in enumerate (a):
  print(f"El indice es: {index} y su nuevo valor es {item**2}")

#Si le quiero caer encima al valor que ya tengo

print(a)
for index, item in enumerate (a):
  a[index] = item**2

print(a)

a = [45, 50, 90, 80, 32, 17]
b = []

for index, item in enumerate(a):
  b.append(item**2)

print(a)
print(b)

#List Comprehesion
b = [x**2 for x in a]     # El ** es para sacar el potencial
b

def cuadrado(x):
  return x**2

b = [cuadrado(x) for x in a]   # Esto es hasta 10 veces mas rapido que un ciclo
b

nums = [1,2,3,4,5,7,8,9,10]
c = [x for x in nums if x % 2 == 0] 
c

#Otra forma

def valorPar(x):
  if (x % 2 == 0):
    return(x)

c = [valorPar(x) for x in nums]
c